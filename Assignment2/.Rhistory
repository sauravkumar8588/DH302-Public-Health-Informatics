df <- read.table("grip_strength_data.tsv", header=TRUE, sep="\t")
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("grip_strength_data.tsv", header=TRUE, sep="\t")
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("grip_strength_data.tsv", header=TRUE, sep="\t")
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("grip_strength_data.tsv", header=TRUE, sep="\t")
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("grip_strength_data.tsv", header=TRUE, sep="\t")
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("Assignment02_grip_strength.tsv", header=TRUE, sep="\t")
# Calculate difference in grip strength
df$diff <- df$before - df$after
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("Assignment02_grip_strength.tsv", header=TRUE)
# Calculate difference in grip strength
df$diff <- df$before - df$after
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("Assignment02_grip_strength.tsv", header=TRUE, sep="\t")
# Calculate difference in grip strength
df$diff <- df$baseline - df$measured_6weekslater
# Shapiro-Wilk test for normality
shapiro.test(df$diff)
# Q-Q plot for normality check
qqnorm(df$diff)
qqline(df$diff)
# Boxplot to detect outliers
boxplot(df$diff, main="Boxplot of Grip Strength Differences")
set . seed (42)
set.seed (42)
alpha <- 0.05
n_ rejections <- sum ( replicate (10000 ,
set.seed (42)
alpha <- 0.05
n_ rejections <- sum ( replicate (10000 ,
set.seed (42)
alpha <- 0.05
n_rejections <- sum ( replicate (10000 ,
t. test ( rexp (100 , 5) , rexp (100 , 5) )$p. value < alpha ))
set.seed (42)
alpha <- 0.05
n_rejections <- sum ( replicate (10000 ,
t.test ( rexp (100 , 5) , rexp (100 , 5) )$p. value < alpha ))
n_rejections / 10000
set.seed(42)
alpha <- 0.05
n_rejections <- sum(replicate(10000,
t.test(rnorm(100, 10, 1), rnorm(100, 10, 2.5))$p.value < alpha))
n_rejections / 10000
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("Assignment02_grip_strength.tsv", header=TRUE, sep="\t")
# Calculate difference in grip strength
df$diff <- df$baseline - df$measured_6weekslater
# Shapiro-Wilk test for normality
shapiro.test(df$diff)
# Q-Q plot for normality check
qqnorm(df$diff)
qqline(df$diff)
# Boxplot to detect outliers
boxplot(df$diff, main="Boxplot of Grip Strength Differences")
# Perform paired t-test
t_test_result <- t.test(df$baseline, df$measured_6weekslater, paired=TRUE)
t_test_result$p.value
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("Assignment02_grip_strength.tsv", header=TRUE, sep="\t")
# Calculate difference in grip strength
df$diff <- df$baseline - df$measured_6weekslater
# Shapiro-Wilk test for normality
shapiro.test(df$diff)
# Q-Q plot for normality check
qqnorm(df$diff)
qqline(df$diff)
# Boxplot to detect outliers
boxplot(df$diff, main="Boxplot of Grip Strength Differences")
# Perform paired t-test
t_test_result <- t.test(df$baseline, df$measured_6weekslater, paired=TRUE)
t_test_result$p.value
# Perform Wilcoxon Signed-Rank Test
wilcox.test(df$baseline, df$measured_6weekslater, paired=TRUE)
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("Assignment02_grip_strength.tsv", header=TRUE, sep="\t")
# Calculate difference in grip strength
df$diff <- df$baseline - df$measured_6weekslater
# Shapiro-Wilk test for normality
shapiro.test(df$diff)
# Q-Q plot for normality check
qqnorm(df$diff)
qqline(df$diff)
# Boxplot to detect outliers
boxplot(df$diff, main="Boxplot of Grip Strength Differences")
# Perform paired t-test
t_test_result <- t.test(df$baseline, df$measured_6weekslater, paired=TRUE)
t_test_result$p.value
# Perform Wilcoxon Signed-Rank Test
wilcox.test(df$baseline, df$measured_6weekslater, paired=TRUE)
# Apply log transformation
df$log_baseline <- log(df$baseline)
df$log_measured_6weeklater <- log(df$measured_6weeklater)
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("Assignment02_grip_strength.tsv", header=TRUE, sep="\t")
# Calculate difference in grip strength
df$diff <- df$baseline - df$measured_6weekslater
# Shapiro-Wilk test for normality
shapiro.test(df$diff)
# Q-Q plot for normality check
qqnorm(df$diff)
qqline(df$diff)
# Boxplot to detect outliers
boxplot(df$diff, main="Boxplot of Grip Strength Differences")
# Perform paired t-test
t_test_result <- t.test(df$baseline, df$measured_6weekslater, paired=TRUE)
t_test_result$p.value
# Perform Wilcoxon Signed-Rank Test
wilcox.test(df$baseline, df$measured_6weekslater, paired=TRUE)
# Apply log transformation
df$log_baseline <- log(df$baseline)
df$log_measured_6weekslater <- log(df$measured_6weekslater)
df$log_diff <- df$log_baseline - df$log_measured_6weekslater
# Normality check on log-transformed differences
shapiro.test(df$log_diff)
# Q-Q plot for log-transformed differences
qqnorm(df$log_diff)
# Load necessary libraries
library(ggplot2)
# Read data (assuming it is a TSV file)
df <- read.table("Assignment02_grip_strength.tsv", header=TRUE, sep="\t")
# Calculate difference in grip strength
df$diff <- df$baseline - df$measured_6weekslater
# Shapiro-Wilk test for normality
shapiro.test(df$diff)
# Q-Q plot for normality check
qqnorm(df$diff)
qqline(df$diff)
# Boxplot to detect outliers
boxplot(df$diff, main="Boxplot of Grip Strength Differences")
# Perform paired t-test
t_test_result <- t.test(df$baseline, df$measured_6weekslater, paired=TRUE)
t_test_result$p.value
# Perform Wilcoxon Signed-Rank Test
wilcox.test(df$baseline, df$measured_6weekslater, paired=TRUE)
# Remove rows where baseline or measured_6weekslater is zero or negative
df <- df[df$baseline > 0 & df$measured_6weekslater > 0, ]
# Remove missing values
df <- na.omit(df)
# Apply log transformation
df$log_baseline <- log(df$baseline)
df$log_measured_6weekslater <- log(df$measured_6weekslater)
df$log_diff <- df$log_baseline - df$log_measured_6weekslater
# Normality check on log-transformed differences
shapiro.test(df$log_diff)
# Q-Q plot for log-transformed differences
qqnorm(df$log_diff)
qqline(df$log_diff)
# Perform paired t-test on log-transformed data
t.test(df$log_baseline, df$log_measured_6weekslater, paired=TRUE)
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
install.packages("dplyr")  # Run this only if dplyr is not installed
library(dplyr)
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
install.packages("tidyr")  # Run if not installed
library(tidyr)
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
# Extract numeric columns for PCA (adjust indices as needed)
pca_data <- df[, 4:21]
# Perform PCA with scaling
pca <- prcomp(pca_data, scale. = TRUE)
# Create a data frame with PCA results
pca_df <- as.data.frame(pca$x)
# Derive a grouping variable from the food_code (e.g., using the first letter)
pca_df$food_category <- substr(df$food_code, 1, 1)
# Plot PC1 vs PC2 colored by food category
ggplot(pca_df, aes(x = PC1, y = PC2, color = food_category)) +
geom_point(size = 2) +
labs(title = "PCA of Amino Acid Profiles", x = "PC1", y = "PC2") +
theme_minimal()
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
# Extract numeric columns for PCA (adjust indices as needed)
pca_data <- df[, 4:21]
# Perform PCA with scaling
pca <- prcomp(pca_data, scale. = TRUE)
# Create a data frame with PCA results
pca_df <- as.data.frame(pca$x)
# Derive a grouping variable from the food_code (e.g., using the first letter)
pca_df$food_category <- substr(df$food_code, 1, 1)
# Plot PC1 vs PC2 colored by food category
ggplot(pca_df, aes(x = PC1, y = PC2, color = food_category)) +
geom_point(size = 2) +
labs(title = "PCA of Amino Acid Profiles", x = "PC1", y = "PC2") +
theme_minimal()
# Get PCA loadings (rotation matrix)
loadings <- pca$rotation
# Identify top 2 features for PC1 based on absolute loadings
top_PC1_indices <- order(abs(loadings[, "PC1"]), decreasing = TRUE)[1:2]
top_PC1_features <- colnames(pca_data)[top_PC1_indices]
# Identify top 2 features for PC2 based on absolute loadings
top_PC2_indices <- order(abs(loadings[, "PC2"]), decreasing = TRUE)[1:2]
top_PC2_features <- colnames(pca_data)[top_PC2_indices]
top_PC1_features
top_PC2_features
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
# Extract numeric columns for PCA (adjust indices as needed)
pca_data <- df[, 4:21]
# Perform PCA with scaling
pca <- prcomp(pca_data, scale. = TRUE)
# Create a data frame with PCA results
pca_df <- as.data.frame(pca$x)
# Derive a grouping variable from the food_code (e.g., using the first letter)
pca_df$food_category <- substr(df$food_code, 1, 1)
# Plot PC1 vs PC2 colored by food category
ggplot(pca_df, aes(x = PC1, y = PC2, color = food_category)) +
geom_point(size = 2) +
labs(title = "PCA of Amino Acid Profiles", x = "PC1", y = "PC2") +
theme_minimal()
# Get PCA loadings (rotation matrix)
loadings <- pca$rotation
# Identify top 2 features for PC1 based on absolute loadings
top_PC1_indices <- order(abs(loadings[, "PC1"]), decreasing = TRUE)[1:2]
top_PC1_features <- colnames(pca_data)[top_PC1_indices]
# Identify top 2 features for PC2 based on absolute loadings
top_PC2_indices <- order(abs(loadings[, "PC2"]), decreasing = TRUE)[1:2]
top_PC2_features <- colnames(pca_data)[top_PC2_indices]
top_PC1_features
top_PC2_features
# Assuming 'code_desc' exists in df and categorizes food items
# and that the top factor for PC1 is stored in column <Feature1>.
# Define two groups (e.g., "Category1" and "Category2")
group1 <- df[df$code_desc == "Category1", "<Feature1>"]
group2 <- df[df$code_desc == "Category2", "<Feature1>"]
# Perform a t-test comparing <Feature1> between the two groups
t_test_result <- t.test(group1, group2)
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
# Extract numeric columns for PCA (adjust indices as needed)
pca_data <- df[, 4:21]
# Perform PCA with scaling
pca <- prcomp(pca_data, scale. = TRUE)
# Create a data frame with PCA results
pca_df <- as.data.frame(pca$x)
# Derive a grouping variable from the food_code (e.g., using the first letter)
pca_df$food_category <- substr(df$food_code, 1, 1)
# Plot PC1 vs PC2 colored by food category
ggplot(pca_df, aes(x = PC1, y = PC2, color = food_category)) +
geom_point(size = 2) +
labs(title = "PCA of Amino Acid Profiles", x = "PC1", y = "PC2") +
theme_minimal()
# Get PCA loadings (rotation matrix)
loadings <- pca$rotation
# Identify top 2 features for PC1 based on absolute loadings
top_PC1_indices <- order(abs(loadings[, "PC1"]), decreasing = TRUE)[1:2]
top_PC1_features <- colnames(pca_data)[top_PC1_indices]
# Identify top 2 features for PC2 based on absolute loadings
top_PC2_indices <- order(abs(loadings[, "PC2"]), decreasing = TRUE)[1:2]
top_PC2_features <- colnames(pca_data)[top_PC2_indices]
top_PC1_features
top_PC2_features
# Assuming 'code_desc' exists in df and categorizes food items
# and that the top factor for PC1 is stored in column <Feature1>.
# Define two groups (e.g., "Category1" and "Category2")
group1 <- df[df$code_desc == "Category1", "Methionine"]
group2 <- df[df$code_desc == "Category2", "Cystine"]
# Perform a t-test comparing <Feature1> between the two groups
t_test_result <- t.test(group1, group2)
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
# Extract numeric columns for PCA (adjust indices as needed)
pca_data <- df[, 4:21]
# Perform PCA with scaling
pca <- prcomp(pca_data, scale. = TRUE)
# Create a data frame with PCA results
pca_df <- as.data.frame(pca$x)
# Derive a grouping variable from the food_code (e.g., using the first letter)
pca_df$food_category <- substr(df$food_code, 1, 1)
# Plot PC1 vs PC2 colored by food category
ggplot(pca_df, aes(x = PC1, y = PC2, color = food_category)) +
geom_point(size = 2) +
labs(title = "PCA of Amino Acid Profiles", x = "PC1", y = "PC2") +
theme_minimal()
# Get PCA loadings (rotation matrix)
loadings <- pca$rotation
# Identify top 2 features for PC1 based on absolute loadings
top_PC1_indices <- order(abs(loadings[, "PC1"]), decreasing = TRUE)[1:2]
top_PC1_features <- colnames(pca_data)[top_PC1_indices]
# Identify top 2 features for PC2 based on absolute loadings
top_PC2_indices <- order(abs(loadings[, "PC2"]), decreasing = TRUE)[1:2]
top_PC2_features <- colnames(pca_data)[top_PC2_indices]
top_PC1_features
top_PC2_features
# Define two groups (e.g., "Category1" and "Category2")
group1 <- df[df$food_code == "Category1", "Methionine"]
group2 <- df[df$food_code == "Category2", "Cystine"]
# Perform a t-test comparing <Feature1> between the two groups
t_test_result <- t.test(group1, group2)
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
# Extract numeric columns for PCA (adjust indices as needed)
pca_data <- df[, 4:21]
# Perform PCA with scaling
pca <- prcomp(pca_data, scale. = TRUE)
# Create a data frame with PCA results
pca_df <- as.data.frame(pca$x)
# Derive a grouping variable from the food_code (e.g., using the first letter)
pca_df$food_category <- substr(df$food_code, 1, 1)
# Plot PC1 vs PC2 colored by food category
ggplot(pca_df, aes(x = PC1, y = PC2, color = food_category)) +
geom_point(size = 2) +
labs(title = "PCA of Amino Acid Profiles", x = "PC1", y = "PC2") +
theme_minimal()
# Get PCA loadings (rotation matrix)
loadings <- pca$rotation
# Identify top 2 features for PC1 based on absolute loadings
top_PC1_indices <- order(abs(loadings[, "PC1"]), decreasing = TRUE)[1:2]
top_PC1_features <- colnames(pca_data)[top_PC1_indices]
# Identify top 2 features for PC2 based on absolute loadings
top_PC2_indices <- order(abs(loadings[, "PC2"]), decreasing = TRUE)[1:2]
top_PC2_features <- colnames(pca_data)[top_PC2_indices]
top_PC1_features
top_PC2_features
# Define two food categories (adjust as needed based on data)
group1_code <- substr(df$food_code, 1, 1) == "A"  # Example: All foods starting with 'A'
group2_code <- substr(df$food_code, 1, 1) == "B"  # Example: All foods starting with 'B'
# Extract values of top PC1 feature for the two groups
group1 <- df[group1_code, "Methionine"]
group2 <- df[group2_code, "Cystine"]
# Perform a t-test
t_test_result <- t.test(group1, group2, var.equal = TRUE)
# Print results
print(t_test_result)
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
# Extract numeric columns for PCA (adjust indices as needed)
pca_data <- df[, 4:21]
# Perform PCA with scaling
pca <- prcomp(pca_data, scale. = TRUE)
# Create a data frame with PCA results
pca_df <- as.data.frame(pca$x)
# Derive a grouping variable from the food_code (e.g., using the first letter)
pca_df$food_category <- substr(df$food_code, 1, 1)
# Plot PC1 vs PC2 colored by food category
ggplot(pca_df, aes(x = PC1, y = PC2, color = food_category)) +
geom_point(size = 2) +
labs(title = "PCA of Amino Acid Profiles", x = "PC1", y = "PC2") +
theme_minimal()
# Get PCA loadings (rotation matrix)
loadings <- pca$rotation
# Identify top 2 features for PC1 based on absolute loadings
top_PC1_indices <- order(abs(loadings[, "PC1"]), decreasing = TRUE)[1:2]
top_PC1_features <- colnames(pca_data)[top_PC1_indices]
# Identify top 2 features for PC2 based on absolute loadings
top_PC2_indices <- order(abs(loadings[, "PC2"]), decreasing = TRUE)[1:2]
top_PC2_features <- colnames(pca_data)[top_PC2_indices]
top_PC1_features
top_PC2_features
# Define two food categories (adjust as needed based on data)
group1_code <- substr(df$food_code, 1, 1) == "A"
group2_code <- substr(df$food_code, 2, 2) == "B"
# Extract values of top PC1 feature for the two groups
group1 <- df[group1_code, "Methionine"]
group2 <- df[group2_code, "Methionine"]
# Perform a t-test
t_test_result <- t.test(group1, group2, var.equal = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
# Extract numeric columns for PCA (adjust indices as needed)
pca_data <- df[, 4:21]
# Perform PCA with scaling
pca <- prcomp(pca_data, scale. = TRUE)
# Create a data frame with PCA results
pca_df <- as.data.frame(pca$x)
# Derive a grouping variable from the food_code (e.g., using the first letter)
pca_df$food_category <- substr(df$food_code, 1, 1)
# Plot PC1 vs PC2 colored by food category
ggplot(pca_df, aes(x = PC1, y = PC2, color = food_category)) +
geom_point(size = 2) +
labs(title = "PCA of Amino Acid Profiles", x = "PC1", y = "PC2") +
theme_minimal()
# Get PCA loadings (rotation matrix)
loadings <- pca$rotation
# Identify top 2 features for PC1 based on absolute loadings
top_PC1_indices <- order(abs(loadings[, "PC1"]), decreasing = TRUE)[1:2]
top_PC1_features <- colnames(pca_data)[top_PC1_indices]
# Identify top 2 features for PC2 based on absolute loadings
top_PC2_indices <- order(abs(loadings[, "PC2"]), decreasing = TRUE)[1:2]
top_PC2_features <- colnames(pca_data)[top_PC2_indices]
top_PC1_features
top_PC2_features
# Define two food categories (adjust as needed based on data)
group1_code <- substr(df$food_code, 1, 1) == "A"
group2_code <- substr(df$food_code, 1, 1) == "B"
# Extract values of top PC1 feature for the two groups
group1 <- df[group1_code, "Methionine"]
group2 <- df[group2_code, "Arginine"]
# Perform a t-test
t_test_result <- t.test(group1, group2, var.equal = TRUE)
# Print results
print(t_test_result)
library(readr)
library(dplyr)
library(ggplot2)
# Read the cleaned dataset
df <- read_tsv("Table8_amino_acid_profile_no_uncertainity.tsv", show_col_types = FALSE)
# Remove NA values and duplicates
df <- df %>% drop_na() %>% unique() %>% as.data.frame()
# Extract numeric columns for PCA (adjust indices as needed)
pca_data <- df[, 4:21]
# Perform PCA with scaling
pca <- prcomp(pca_data, scale. = TRUE)
# Create a data frame with PCA results
pca_df <- as.data.frame(pca$x)
# Derive a grouping variable from the food_code (e.g., using the first letter)
pca_df$food_category <- substr(df$food_code, 1, 1)
# Plot PC1 vs PC2 colored by food category
ggplot(pca_df, aes(x = PC1, y = PC2, color = food_category)) +
geom_point(size = 2) +
labs(title = "PCA of Amino Acid Profiles", x = "PC1", y = "PC2") +
theme_minimal()
# Get PCA loadings (rotation matrix)
loadings <- pca$rotation
# Identify top 2 features for PC1 based on absolute loadings
top_PC1_indices <- order(abs(loadings[, "PC1"]), decreasing = TRUE)[1:2]
top_PC1_features <- colnames(pca_data)[top_PC1_indices]
# Identify top 2 features for PC2 based on absolute loadings
top_PC2_indices <- order(abs(loadings[, "PC2"]), decreasing = TRUE)[1:2]
top_PC2_features <- colnames(pca_data)[top_PC2_indices]
top_PC1_features
top_PC2_features
# Define two food categories (adjust as needed based on data)
group1_code <- substr(df$food_code, 1, 1) == "A"
group2_code <- substr(df$food_code, 1, 1) == "B"
# Extract values of top PC1 feature for the two groups
group1 <- df[group1_code, "Methionine"]
group2 <- df[group2_code, "Methionine"]
# Perform a t-test
t_test_result <- t.test(group1, group2, var.equal = TRUE)
# Print results
print(t_test_result)
